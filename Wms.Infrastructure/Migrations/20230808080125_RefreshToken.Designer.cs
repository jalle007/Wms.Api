// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wms.Infrastructure;

#nullable disable

namespace Wms.Infrastructure.Migrations
{
    [DbContext(typeof(WmsDbContext))]
    [Migration("20230808080125_RefreshToken")]
    partial class RefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("area_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("area_pkey");

                    b.HasIndex("WarehouseId");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("character varying")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("location_name");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("location_pkey");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer")
                        .HasColumnName("source_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer")
                        .HasColumnName("target_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("orders_pkey");

                    b.HasIndex("SampleId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.OrderTrace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("order_trace_pkey");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("order_trace", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("barcode");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("sample_pkey");

                    b.HasIndex("ParentId");

                    b.ToTable("sample", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ShelfName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("shelf_name");

                    b.HasKey("Id")
                        .HasName("shelf_pkey");

                    b.HasIndex("AreaId");

                    b.ToTable("shelf", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<int>("Column")
                        .HasColumnType("integer")
                        .HasColumnName("column");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<int>("Row")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.Property<int>("ShelfId")
                        .HasColumnType("integer")
                        .HasColumnName("shelf_id");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("storage_location_pkey");

                    b.HasIndex("AreaId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ShelfId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("storage_location", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.TransportUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("TransportUnitName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("transport_unit_name");

                    b.HasKey("Id")
                        .HasName("transport_unit_pkey");

                    b.ToTable("transport_unit", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.VmsConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("vms_config_pkey");

                    b.HasIndex("AreaId");

                    b.HasIndex("LocationId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("vms_config", (string)null);
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("warehouse_name");

                    b.HasKey("Id")
                        .HasName("warehouse_pkey");

                    b.HasIndex("LocationId");

                    b.ToTable("warehouse", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wms.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Area", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Warehouse", "Warehouse")
                        .WithMany("Areas")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("area_warehouse_id_fkey");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Order", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Sample", "Sample")
                        .WithMany("Orders")
                        .HasForeignKey("SampleId")
                        .IsRequired()
                        .HasConstraintName("orders_sample_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.StorageLocation", "Source")
                        .WithMany("OrderSources")
                        .HasForeignKey("SourceId")
                        .IsRequired()
                        .HasConstraintName("orders_source_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.StorageLocation", "Target")
                        .WithMany("OrderTargets")
                        .HasForeignKey("TargetId")
                        .IsRequired()
                        .HasConstraintName("orders_target_id_fkey");

                    b.Navigation("Sample");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.OrderTrace", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Order", "Order")
                        .WithMany("OrderTraces")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("order_trace_order_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.User", "User")
                        .WithMany("OrderTraces")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("order_trace_user_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Sample", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Sample", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("sample_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Shelf", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Area", "Area")
                        .WithMany("Shelves")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("shelf_area_id_fkey");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.StorageLocation", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Area", "Area")
                        .WithMany("StorageLocations")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("storage_location_area_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.Location", "Location")
                        .WithMany("StorageLocations")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("storage_location_location_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.Shelf", "Shelf")
                        .WithMany("StorageLocations")
                        .HasForeignKey("ShelfId")
                        .IsRequired()
                        .HasConstraintName("storage_location_shelf_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.Warehouse", "Warehouse")
                        .WithMany("StorageLocations")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("storage_location_warehouse_id_fkey");

                    b.Navigation("Area");

                    b.Navigation("Location");

                    b.Navigation("Shelf");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.VmsConfig", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Area", "Area")
                        .WithMany("VmsConfigs")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("vms_config_area_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.Location", "Location")
                        .WithMany("VmsConfigs")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("vms_config_location_id_fkey");

                    b.HasOne("Wms.Infrastructure.Models.Warehouse", "Warehouse")
                        .WithMany("VmsConfigs")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("vms_config_warehouse_id_fkey");

                    b.Navigation("Area");

                    b.Navigation("Location");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Warehouse", b =>
                {
                    b.HasOne("Wms.Infrastructure.Models.Location", "Location")
                        .WithMany("Warehouses")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("warehouse_location_id_fkey");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Area", b =>
                {
                    b.Navigation("Shelves");

                    b.Navigation("StorageLocations");

                    b.Navigation("VmsConfigs");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Location", b =>
                {
                    b.Navigation("StorageLocations");

                    b.Navigation("VmsConfigs");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Order", b =>
                {
                    b.Navigation("OrderTraces");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Sample", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Shelf", b =>
                {
                    b.Navigation("StorageLocations");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.StorageLocation", b =>
                {
                    b.Navigation("OrderSources");

                    b.Navigation("OrderTargets");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.User", b =>
                {
                    b.Navigation("OrderTraces");
                });

            modelBuilder.Entity("Wms.Infrastructure.Models.Warehouse", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("StorageLocations");

                    b.Navigation("VmsConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
